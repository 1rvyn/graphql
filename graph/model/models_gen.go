// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Employee struct {
	ID           string `json:"id"`
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username     string `json:"username"`
	Password     string `json:"password"`
	Email        string `json:"email"`
	Dob          string `json:"dob"`
	DepartmentID string `json:"departmentID"`
	Position     string `json:"position"`
	CreatedAt    string `json:"createdAt"`
	UpdatedAt    string `json:"updatedAt"`
}

type EmployeeFilter struct {
	FirstName    *string `json:"firstName,omitempty"`
	LastName     *string `json:"lastName,omitempty"`
	Email        *string `json:"email,omitempty"`
	Dob          *string `json:"dob,omitempty"`
	DepartmentID *string `json:"departmentID,omitempty"`
	Position     *string `json:"position,omitempty"`
}

type EmployeeSort struct {
	CreatedAt *SortDirection `json:"createdAt,omitempty"`
}

type NewEmployee struct {
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	Username     string `json:"username"`
	Password     string `json:"password"`
	Email        string `json:"email"`
	Dob          string `json:"dob"`
	DepartmentID string `json:"departmentID"`
	Position     string `json:"position"`
}

type Pagination struct {
	PageNumber *int `json:"pageNumber,omitempty"`
	PageSize   *int `json:"pageSize,omitempty"`
}

type UpdateEmployee struct {
	FirstName    *string `json:"firstName,omitempty"`
	LastName     *string `json:"lastName,omitempty"`
	Username     *string `json:"username,omitempty"`
	Password     *string `json:"password,omitempty"`
	Email        *string `json:"email,omitempty"`
	Dob          *string `json:"dob,omitempty"`
	DepartmentID *string `json:"departmentID,omitempty"`
	Position     *string `json:"position,omitempty"`
}

type SortDirection string

const (
	SortDirectionAsc  SortDirection = "ASC"
	SortDirectionDesc SortDirection = "DESC"
)

var AllSortDirection = []SortDirection{
	SortDirectionAsc,
	SortDirectionDesc,
}

func (e SortDirection) IsValid() bool {
	switch e {
	case SortDirectionAsc, SortDirectionDesc:
		return true
	}
	return false
}

func (e SortDirection) String() string {
	return string(e)
}

func (e *SortDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortDirection", str)
	}
	return nil
}

func (e SortDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
