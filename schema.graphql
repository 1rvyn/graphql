type Query {
  employees(filter: EmployeeFilter, sort: EmployeeSort, pagination: Pagination): [Employee!]!
  employee(id: ID!): Employee
}

type Mutation {
  createEmployee(input: NewEmployee!): Employee!
  updateEmployee(id: ID!, input: UpdateEmployee!): Employee!
  deleteEmployee(id: ID!): Boolean
}

type Employee {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  dob: String!
  departmentID: ID!
  position: String!
  createdAt: String!
  updatedAt: String!
}

input NewEmployee {
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  dob: String!
  departmentID: ID!
  position: String!
}

input UpdateEmployee {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  dob: String
  departmentID: ID
  position: String
}

input EmployeeFilter {
  firstName: String
  lastName: String
  email: String
  dob: String
  departmentID: ID
  position: String
}

input EmployeeSort {
  createdAt: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

input Pagination {
  pageNumber: Int
  pageSize: Int
}
